[project]
name = "your-project-name"
version = "0.1.0"
description = "Your project description"
authors = [
    { name = "Your Name", email = "your-email@example.com" }
]
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    # Core dependencies
    "pydantic>=2.0.0",
    
    # Add your project-specific dependencies here
    # Examples:
    # "fastapi>=0.104.0",  # For web APIs
    # "numpy>=1.24.0",      # For numerical computing
    # "pandas>=2.0.0",      # For data analysis
    # "httpx>=0.25.0",      # For HTTP requests
    # "click>=8.1.0",       # For CLI tools
]

[project.optional-dependencies]
dev = [
    # Development dependencies
    "ruff>=0.1.0",
    "pyright>=1.1.350",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
    "pre-commit>=3.5.0",
]

[project.urls]
homepage = "https://github.com/YourUsername/your-project-name"
repository = "https://github.com/YourUsername/your-project-name"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/myproject"]

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "E731",  # lambda assignment
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__ files

[tool.pyright]
pythonVersion = "3.11"
typeCheckingMode = "standard"
reportUnusedImport = true
reportUnusedVariable = true
reportUnusedFunction = false
reportGeneralTypeIssues = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = true
reportUnnecessaryTypeIgnoreComment = true
reportUnknownParameterType = false
reportUnknownArgumentType = false
reportUnknownVariableType = false
reportUnknownMemberType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportPrivateUsage = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src/myproject",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src/myproject"]
omit = [
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]